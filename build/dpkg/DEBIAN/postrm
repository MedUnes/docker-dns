#!/bin/bash
set -e

PATH=/usr/sbin:/usr/bin:/sbin:/bin

SERVICE=docker-dns
BIN=/usr/bin/docker-dns
BACKUP_DIR=/var/lib/docker-dns/backup
STATE_DIR=/var/lib/docker-dns

RESOLVED_DROPIN=/etc/systemd/resolved.conf.d/docker-dns.conf
NM_DROPIN=/etc/NetworkManager/conf.d/90-docker-dns.conf
RESOLV_CONF_FILE=/etc/resolv.conf  # define if needed

restore_last() {
    prefix="$1"
    dst="$2"
    last=$(ls -1t "$BACKUP_DIR" 2>/dev/null | grep "^$prefix" | head -n1 || true)
    [ -n "$last" ] && mv -f "$BACKUP_DIR/$last" "$dst"
}

case "$1" in
remove|purge)
    if systemctl list-unit-files "$SERVICE.service" >/dev/null 2>&1; then
        if systemctl is-active --quiet "$SERVICE.service"; then
            echo "Stopping $SERVICE.service..."
            systemctl stop "$SERVICE.service" || true
        fi
        echo "Disabling $SERVICE.service..."
        systemctl disable --now "$SERVICE.service" || true
    fi
    echo "Resetting capabilities..."
    setcap -r "$BIN" 2>/dev/null || true

    # Only remove binary if not owned by package anymore
    if ! dpkg-query -L "$SERVICE" 2>/dev/null | grep -qx "$BIN"; then
        echo "Removing $BIN"
        rm -f "$BIN"
    fi
    ;;
esac

if [ "$1" = "purge" ]; then
    echo "Purging $SERVICE..."

    echo "Rolling back systemd-resolved integration..."
    rm -f "$RESOLVED_DROPIN"
    rm -f "$NM_DROPIN"

    echo "Restarting systemd-resolved and NetworkManager..."
    systemctl try-restart systemd-resolved NetworkManager || true

    echo "Restoring /etc/resolv.conf if needed..."
    if [ -L "$RESOLV_CONF_FILE" ]; then
        restore_last resolv.conf "$RESOLV_CONF_FILE" || true
    fi

    rm -rf "$BACKUP_DIR"
    rmdir --ignore-fail-on-non-empty "$STATE_DIR" 2>/dev/null || true
fi

# Finally reload systemd once everything is removed
echo "Reloading systemd..."
systemctl daemon-reexec || true
systemctl daemon-reload || true

exit 0
