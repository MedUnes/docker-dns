name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    # Depend on both build (for the .deb) and integration tests
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    container:
      # Corrected: Use the official ubuntu:22.04 image
      image: ubuntu:22.04
      # Options to allow systemd and Docker-in-Docker to function
      options: --privileged --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro
    services:
      docker:
        image: docker:dind # Docker-in-Docker service
        options: --privileged # dind needs privileged mode
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies and docker-dns
        run: |
          # Update package lists
          apt-get update
          # Install necessary tools: systemd, bats, dnsutils, docker client CLI.
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends systemd bats dnsutils docker.io
          # Install the downloaded deb package
          # Use || true on dpkg and apt-get install -f in case dependencies are already met
          # dpkg -i ./docker-dns.deb || true
          apt-get install --fix-broken -y # Install any missing dependencies for the deb

      - name: Configure systemd-resolved and Run E2E Tests
        env:
          # Ensure Docker CLI talks to the dind service
          DOCKER_HOST: tcp://docker:2375
        run: |
          # Restart systemd-resolved to apply the new configuration
          # Check if the service exists and restart it
          if systemctl list-units --full -all | grep -q 'systemd-resolved.service'; then
            echo "Restarting systemd-resolved service..."
            systemctl restart systemd-resolved.service
            # Give resolved a moment to restart and apply settings
            sleep 2
            resolvectl status # Print status for debugging
          else
            echo "Warning: systemd-resolved.service not found. Skipping restart."
          fi
          
          # Wait for docker daemon (dind service) to be ready
          echo "Waiting for Docker daemon (dind)..."
          timeout=30
          while ! docker info > /dev/null 2>&1; do
            sleep 1
            timeout=$((timeout - 1))
            if [ $timeout -le 0 ]; then
              echo "Docker daemon (dind) did not start within timeout."
              docker info # Print info for debugging
              exit 1
            fi
          done
          echo "Docker daemon ready."

          # Now run the tests (the bats setup function will start docker-dns)
          echo "Running BATS tests..."
          systemctl status systemd-resolved
          docker version
          systemctl status docker*
          # bats tests/e2e_test.sh
