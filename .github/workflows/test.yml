name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create test environment
        run: |
          # Create a basic test container
          docker run --name test-container -d \
            -v $(pwd):/app \
            --dns 8.8.8.8 \
            ubuntu:22.04 sleep infinity
          
          # Install minimal required packages
          docker exec test-container apt-get update
          docker exec test-container apt-get install -y bats dnsutils curl
  
          # Create mock directory structure
          docker exec test-container bash -c "mkdir -p /etc/systemd/resolved.conf.d"
          docker exec test-container bash -c "mkdir -p /run/systemd/resolve"
          docker exec test-container bash -c "mkdir -p /var/run/docker-dns"
          
          # Create mock resolv.conf for DNS testing
          docker exec test-container bash -c "echo 'nameserver 127.0.0.53' > /run/systemd/resolve/resolv.conf"
          docker exec test-container bash -c "echo 'options edns0 trust-ad' >> /run/systemd/resolve/resolv.conf"
          docker exec test-container bash -c "echo 'search .' >> /run/systemd/resolve/resolv.conf"
          
          # Create mock systemctl script
          docker exec test-container bash -c "cat > /usr/local/bin/systemctl << 'EOF'
          #!/bin/bash
          
          # Mock systemctl for docker-dns tests
          cmd=\$1
          service=\$2
          
          # Handle different commands
          case \$cmd in
            start)
              echo "Starting \$service"
              touch /var/run/\$service.running
              return 0
              ;;
            stop)
              echo "Stopping \$service"
              rm -f /var/run/\$service.running
              return 0
              ;;
            status)
              if [ -f /var/run/\$service.running ]; then
                echo "● \$service.service - \$service Service"
                echo "   Active: active (running)"
                return 0
              else
                echo "● \$service.service - \$service Service"
                echo "   Active: inactive (dead)"
                return 3
              fi
              ;;
            enable|disable|is-enabled)
              return 0
              ;;
            *)
              echo "Unsupported command: \$cmd"
              return 1
              ;;
          esac
          EOF"
          
          # Make systemctl executable
          docker exec test-container chmod +x /usr/local/bin/systemctl
          
          # Create mock docker command
          docker exec test-container bash -c "cat > /usr/local/bin/docker << 'EOF'
          #!/bin/bash
          
          # Mock docker command for tests
          cmd=\$1
          
          if [ "\$cmd" = "ps" ]; then
            echo "CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS   PORTS   NAMES"
            echo "abc123         nginx     \"nginx\"   2 hours   Up       80/tcp   e2e-test-container"
          elif [ "\$cmd" = "inspect" ]; then
            echo '[{"Id":"e2e-test-container","Name":"e2e-test-container","NetworkSettings":{"Networks":{"bridge":{"IPAddress":"172.17.0.2"}}}}]'
          else
            echo "Mock docker: \$cmd"
          fi
          EOF"
          
          # Make docker executable
          docker exec test-container chmod +x /usr/local/bin/docker
          
          # Copy test files
          docker cp . test-container:/tests
          
          # Examine the test files
          echo "===== Test Script Content ====="
          docker exec test-container cat /tests/tests/e2e_test.sh || echo "Test script not found"
          echo "=============================="

      - name: Run tests
        run: |
          # Run the tests with our mock environment
          docker exec test-container bash -c "cd /tests && SKIP_DOCKER_START=true bats tests/e2e_test.sh" || true
          
          # Output test log for debugging
          echo "===== Test Log ====="
          docker exec test-container cat /tests/bats.log || true
          echo "===================="

      - name: Cleanup
        if: always()
        run: docker rm -f test-container || true