name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    # Depend on both build (for the .deb) and integration tests
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    container:
      # Corrected: Use the official ubuntu:22.04 image
      image: ubuntu:22.04
      # Options to allow systemd and Docker-in-Docker to function
      options: --privileged --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro
    services:
      docker:
        image: docker:dind # Docker-in-Docker service
        options: --privileged # dind needs privileged mode
    steps:
      - uses: actions/checkout@v4

      # Download the .deb package built in the 'build' job
      - name: Download docker-dns.deb artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-dns-deb
          # Optional: specify path if needed, defaults to current dir

      - name: Install Dependencies and docker-dns
        run: |
          # Update package lists
          apt-get update
          # Install necessary tools: systemd, bats, dnsutils, docker client CLI.
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends systemd bats dnsutils docker.io
          # Install the downloaded deb package
          # Use || true on dpkg and apt-get install -f in case dependencies are already met
          dpkg -i ./docker-dns.deb || true
          apt-get install --fix-broken -y # Install any missing dependencies for the deb

      - name: Configure systemd-resolved and Run E2E Tests
        env:
          # Ensure Docker CLI talks to the dind service
          DOCKER_HOST: tcp://docker:2375
        run: |
          # Restart systemd-resolved to apply the new configuration
          # Check if the service exists and restart it
          if systemctl list-units --full -all | grep -q 'systemd-resolved.service'; then
            echo "Restarting systemd-resolved service..."
            systemctl restart systemd-resolved.service
            # Give resolved a moment to restart and apply settings
            sleep 2
            resolvectl status # Print status for debugging
          else
            echo "Warning: systemd-resolved.service not found. Skipping restart."
          fi
          
          # Wait for docker daemon (dind service) to be ready
          echo "Waiting for Docker daemon (dind)..."
          timeout=30
          while ! docker info > /dev/null 2>&1; do
            sleep 1
            timeout=$((timeout - 1))
            if [ $timeout -le 0 ]; then
              echo "Docker daemon (dind) did not start within timeout."
              docker info # Print info for debugging
              exit 1
            fi
          done
          echo "Docker daemon ready."

          # Now run the tests (the bats setup function will start docker-dns)
          echo "Running BATS tests..."
          # bats tests/e2e_test.sh

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
      - name: Run GoReleaser
        id: run_go_releaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_SECRET }}
      - name: Get release upload URL
        id: get_release_url
        run: |
          release_data=$(gh api repos/${GITHUB_REPOSITORY}/releases/tags/${GITHUB_REF_NAME})
          echo "UPLOAD_URL=$(echo $release_data | jq -r '.upload_url' | sed 's/{.*}//')" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ACTION_SECRET }}
      - name: Build Debian Package
        run: |
          cd ./build/dpkg
          export NUMERIC_VERSION=$(echo "${{ github.ref_name }}" | sed  "s/v//g")
          echo "NUMERIC_VERSION=${NUMERIC_VERSION}" >> $GITHUB_ENV
          ./build.sh  ${{ github.repository_owner }} ${{ github.event.repository.name }} "${{ github.ref_name }}"
      - name: Upload Debian package to GitHub Release
        run: |
          CUR_DIR="./build/dpkg/"
          DEB_FILE=$(ls ./build/dpkg/*.deb | tail -1)
          CHECKSUM_SUFFIX="_checksum.txt"
          sha256sum "$DEB_FILE" | sed "s#$CUR_DIR##g"
          sha256sum "$DEB_FILE" | sed "s#$CUR_DIR##g" > "$DEB_FILE$CHECKSUM_SUFFIX"
          echo "DEB_FILE=$DEB_FILE"
          echo "DEB_CHECKSUM_FILE=$DEB_FILE$CHECKSUM_SUFFIX"
          cat "$DEB_FILE$CHECKSUM_SUFFIX"
          gh release upload "${GITHUB_REF_NAME}" ./build/dpkg/*.deb --repo "${GITHUB_REPOSITORY}"
          gh release upload "${GITHUB_REF_NAME}" "$DEB_FILE$CHECKSUM_SUFFIX" --repo "${GITHUB_REPOSITORY}"
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_SECRET }}
