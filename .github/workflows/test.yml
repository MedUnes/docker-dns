name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Dockerfile for systemd container
        run: |
          cat > Dockerfile.systemd <<EOF
          FROM ubuntu:22.04
          
          # Install systemd, Docker, and other essentials
          RUN apt-get update && \\
              DEBIAN_FRONTEND=noninteractive apt-get install -y \\
              systemd systemd-sysv \\
              dnsutils \\
              bats \\
              curl \\
              apt-transport-https \\
              ca-certificates \\
              gnupg \\
              lsb-release
          
          # Install Docker
          RUN curl -fsSL https://get.docker.com | sh
          
          # Clean up apt cache
          RUN rm -rf /var/lib/apt/lists/*
          
          # Configure systemd
          RUN cd /lib/systemd/system/sysinit.target.wants/ && \\
              rm -f \$(ls | grep -v systemd-tmpfiles-setup) && \\
              rm -f /lib/systemd/system/multi-user.target.wants/* && \\
              rm -f /etc/systemd/system/*.wants/* && \\
              rm -f /lib/systemd/system/local-fs.target.wants/* && \\
              rm -f /lib/systemd/system/sockets.target.wants/*udev* && \\
              rm -f /lib/systemd/system/sockets.target.wants/*initctl* && \\
              rm -f /lib/systemd/system/basic.target.wants/* && \\
              rm -f /lib/systemd/system/anaconda.target.wants/*
          
          # Enable systemd-resolved (will be done at runtime)
          RUN echo "systemd-resolved will be enabled at runtime"
          
          # Set entrypoint for systemd
          CMD ["/lib/systemd/systemd"]
          EOF
          
          # Build the Docker image
          docker build -t systemd-docker-test -f Dockerfile.systemd .

      - name: Run tests in systemd container
        run: |
          # Run the container with systemd as init
          docker run --name systemd-test -d --privileged \
            -v $(pwd):/app \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            --tmpfs /tmp --tmpfs /run --tmpfs /run/lock \
            systemd-docker-test
          
          # Give systemd a moment to initialize
          sleep 10
          
          # Enable systemd-resolved now that we're running
          docker exec systemd-test systemctl enable systemd-resolved
          docker exec systemd-test systemctl start systemd-resolved
          
          # Copy test files if needed and run tests
          docker exec systemd-test bash -c "
            mkdir -p /tests && 
            cp -r /app/* /tests/ && 
            cd /tests && 
            systemctl status systemd-resolved && 
            ls -la /usr/local/bin/ &&
            docker --version &&
            bats tests/e2e_test.sh || true
          "
          
          # Get logs for debugging
          echo "=== Docker logs ==="
          docker logs systemd-test
          echo "=== systemd-resolved status ==="
          docker exec systemd-test systemctl status systemd-resolved || true

      - name: Cleanup
        if: always()
        run: docker rm -f systemd-test || true