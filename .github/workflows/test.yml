name: Test Pipeline

on: [ push, pull_request ]
env:
  # --- USE A SYSTEMD-READY IMAGE ---
  # Switched to an image known to work well with systemd in containers
  TEST_OS_IMAGE: "jrei/systemd-ubuntu:22.04"
  CONTAINER_NAME: "systemd-test-env"

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    runs-on: ubuntu-latest # Use a standard GitHub Actions runner

    container:
      image: quay.io/podman/stable # Official Podman image
      options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Workspace Path (using ENV var inside job container)
        run: |
          echo "Host workspace path variable (from GHA context): ${{ github.workspace }}"
          echo "Job container GITHUB_WORKSPACE env var: $GITHUB_WORKSPACE"
          echo "---"
          echo "Checking workspace directory existence using ENV var: $GITHUB_WORKSPACE"
          if [ -d "$GITHUB_WORKSPACE" ]; then
            echo "Job container workspace directory '$GITHUB_WORKSPACE' exists. Listing contents:"
            ls -la "$GITHUB_WORKSPACE"
          else
            echo "ERROR: Workspace directory '$GITHUB_WORKSPACE' not found inside job container!"
            exit 1
          fi
          echo "---"

      - name: Start systemd container in background
        run: |
          # Define image name (assuming docker.io, adjust if needed)
          FQ_IMAGE_NAME="docker.io/${{ env.TEST_OS_IMAGE }}"

          echo "Starting systemd container (${FQ_IMAGE_NAME}) named ${{ env.CONTAINER_NAME }}..."

          # --- Use /sbin/init ---
          # Images like jrei/systemd-ubuntu are typically configured
          # to work correctly when started with /sbin/init.
          INIT_COMMAND="/sbin/init"

          podman run -d --name ${{ env.CONTAINER_NAME }} --privileged --cgroupns=host \
            -v "$GITHUB_WORKSPACE":/workdir \
            ${FQ_IMAGE_NAME} ${INIT_COMMAND}

          echo "Waiting for systemd to initialize..."
          sleep 20 # Increased sleep duration

          # Check if systemd is minimally operational
          if podman exec ${{ env.CONTAINER_NAME }} systemctl list-units > /dev/null; then
             echo "Systemd seems operational. Checking system running state..."
             # Wait for the system to reach the 'running' state
             if podman exec ${{ env.CONTAINER_NAME }} systemctl is-system-running --wait; then
               echo "Systemd reports system is running."
             else
               # Use systemctl status to get more info if degraded
               status=$(podman exec ${{ env.CONTAINER_NAME }} systemctl is-system-running)
               echo "Warning: Systemd might be degraded but continuing... State: $status"
               podman exec ${{ env.CONTAINER_NAME }} systemctl status --no-pager --full || true # Display status
             fi
          else
             echo "Error: Failed to execute systemctl inside the container."
             echo "Checking container status:"
             podman ps -a --filter name=${{ env.CONTAINER_NAME }}
             echo "Dumping container logs:"
             podman logs ${{ env.CONTAINER_NAME }}
             exit 1
          fi

      - name: Install dependencies (Docker, Docker Compose) inside the container
        run: |
          echo "Updating apt cache and installing dependencies..."
          # Use podman exec to run commands inside the systemd container.
          podman exec ${{ env.CONTAINER_NAME }} bash -c ' \
            export DEBIAN_FRONTEND=noninteractive && \
            apt-get update && \
            apt-get install -y --no-install-recommends \
              docker.io \
              docker-compose-v2 \
              curl \
              wget \
              bash \
              jq \
              net-tools \
              dnsutils \
              git \
              libcap2-bin \
              ca-certificates \
              sudo && \
            apt-get clean && rm -rf /var/lib/apt/lists/*'
          echo "Dependencies installed."

      - name: Enable and Start Docker service via systemd
        run: |
          echo "Enabling and starting Docker service using systemctl..."
          podman exec ${{ env.CONTAINER_NAME }} systemctl enable docker
          podman exec ${{ env.CONTAINER_NAME }} systemctl start docker

          echo "Waiting for Docker service to become active..."
          # Loop until 'docker.service' is active or timeout (e.g., 30 seconds)
          timeout=30
          interval=2
          elapsed=0
          while ! podman exec ${{ env.CONTAINER_NAME }} systemctl is-active --quiet docker; do
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout waiting for Docker service to start."
              podman exec ${{ env.CONTAINER_NAME }} systemctl status docker --no-pager -n 50
              podman exec ${{ env.CONTAINER_NAME }} journalctl -u docker --no-pager -n 50
              exit 1
            fi
            echo "Waiting for Docker... (${elapsed}s / ${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Docker service is active."
          podman exec ${{ env.CONTAINER_NAME }} docker info # Verify docker is running

      - name: Run Install Debian Package
        run: |
          echo "Running tests inside the container..."
          # Add your actual test commands here, e.g.:
          podman exec ${{ env.CONTAINER_NAME }} resolvectl status
          podman exec ${{ env.CONTAINER_NAME }} service systemd-resolved status
          podman exec ${{ env.CONTAINER_NAME }} ls /workdir
          podman exec ${{ env.CONTAINER_NAME }} docker ps
          podman exec ${{ env.CONTAINER_NAME }} chmod +x /workdir/install_debian_latest.sh
          podman exec ${{ env.CONTAINER_NAME }} /workdir/install_debian_latest.sh
          podman exec ${{ env.CONTAINER_NAME }} systemctl status docker-dns.service --no-pager -n 50
          podman exec ${{ env.CONTAINER_NAME }} docker run -d --name nginx nginx:alpine
          podman exec ${{ env.CONTAINER_NAME }} sleep 1
      - name: Test Direct Internal Resolution
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }} dig @127.0.0.153 nginx.docker +short | head -1 || (echo "Internal DNS resolution against 127.0.0.153 failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "Internal DNS resolution against 127.0.0.153 returned an unexpected value" && exit 1)
          echo "nginx.docker : $address"
      - name: Test Integrated Internal Resolution (systemd-resolved)
        run: |          
          address="$(podman exec ${{ env.CONTAINER_NAME }} dig nginx.docker +short | head -1 || (echo "Internal DNS resolution through systemd-resolved failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "Internal DNS resolution through systemd-resolved returned an unexpected value" && exit 1)
          echo "nginx.docker : $address"
      - name: Test Direct External Resolution
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }} dig @127.0.0.153 google.com +short | head -1 || (echo "External DNS resolution against 127.0.0.153 failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "External DNS resolution against 127.0.0.153 returned an unexpected value" && exit 1)
          echo "google.com : $address"
      - name: Test Integrated External Resolution (systemd-resolved)
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }}  dig google.com +short | head -1 || (echo "External DNS resolution through systemd-resolved failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "External DNS resolution through systemd-resolved returned an unexpected value" && exit 1)
          echo "google.com : $address"
