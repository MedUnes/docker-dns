name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies in Ubuntu Container
        run: |
          # Run installation steps in Ubuntu container with Docker socket mounted
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/workspace -w /workspace ubuntu:22.04 bash -c "
            apt-get update && \
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              systemd systemd-resolved bats dnsutils apt-utils ca-certificates curl gnupg lsb-release && \
          
            # Install Docker CLI only (not the daemon)
            mkdir -p /etc/apt/keyrings && \
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
            echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" > /etc/apt/sources.list.d/docker.list && \
            apt-get update && \
            apt-get install -y docker-ce-cli && \
          
            # Start systemd-resolved if needed for your tests
            systemctl enable systemd-resolved && \
            systemctl start systemd-resolved || true && \
          
            # For demonstration purposes, verify Docker works
            docker ps
          "

      - name: Run Tests
        run: |
          # Run tests inside Ubuntu container with Docker socket mounted
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/workspace -w /workspace ubuntu:22.04 bash -c "
            apt-get update && \
            apt-get install -y bats  "