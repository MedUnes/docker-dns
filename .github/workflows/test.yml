name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bats dnsutils docker.io

      - name: Set up test environment
        run: |
          # Create a simple Ubuntu container without systemd
          docker run --name test-container -d \
            -v $(pwd):/app \
            --network host \
            ubuntu:22.04 sleep infinity
          
          # Install basic packages
          docker exec test-container apt-get update
          docker exec test-container apt-get install -y bats dnsutils resolvconf iputils-ping netcat-openbsd
  
          # Install Docker CLI for container management
          docker exec test-container bash -c "apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release"
          docker exec test-container bash -c "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg"
          docker exec test-container bash -c "echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null"
          docker exec test-container apt-get update
          docker exec test-container apt-get install -y docker-ce-cli
          
          # Set up Docker connection to host Docker
          docker exec test-container bash -c "mkdir -p /root/.docker"
          echo '{"hosts": ["tcp://host.docker.internal:2375"]}' | docker exec -i test-container bash -c "cat > /root/.docker/config.json"
          
          # Create mock systemctl for services we need to test
          docker exec test-container bash -c "cat > /usr/bin/systemctl << 'EOF'
          #!/bin/bash
          
          # Mock systemctl script that handles basic start/stop/status/enable/disable
          COMMAND=\$1
          SERVICE=\$2
          
          if [[ \$SERVICE == 'docker-dns' ]]; then
            case \$COMMAND in
              start)
                echo "Starting mock docker-dns service..."
                # Set up networking or mock what docker-dns does
                mkdir -p /etc/docker-dns/
                echo "Mock docker-dns is running" > /etc/docker-dns/status
                ;;
              stop)
                echo "Stopping mock docker-dns service..."
                rm -f /etc/docker-dns/status
                ;;
              status)
                if [ -f /etc/docker-dns/status ]; then
                  echo "● docker-dns.service - Docker DNS Service"
                  echo "     Loaded: loaded"
                  echo "     Active: active (running)"
                  exit 0
                else
                  echo "● docker-dns.service - Docker DNS Service"
                  echo "     Loaded: loaded"
                  echo "     Active: inactive (dead)"
                  exit 3
                fi
                ;;
              enable)
                echo "docker-dns enabled"
                mkdir -p /etc/systemd/system/multi-user.target.wants/
                touch /etc/systemd/system/multi-user.target.wants/docker-dns.service
                ;;
              disable)
                echo "docker-dns disabled"
                rm -f /etc/systemd/system/multi-user.target.wants/docker-dns.service
                ;;
            esac
          elif [[ \$SERVICE == 'systemd-resolved' ]]; then
            case \$COMMAND in
              start)
                echo "Starting mock systemd-resolved..."
                cp /etc/resolv.conf /etc/resolv.conf.backup || true
                echo "nameserver 127.0.0.53" > /etc/resolv.conf
                touch /var/run/systemd-resolved.running
                ;;
              status)
                echo "● systemd-resolved.service - Network Name Resolution"
                echo "     Loaded: loaded"
                echo "     Active: active (running)"
                exit 0
                ;;
              *)
                echo "Command \$COMMAND not implemented for systemd-resolved"
                ;;
            esac
          else
            echo "Unknown service: \$SERVICE"
            exit 1
          fi
          EOF"
          
          # Make systemctl executable
          docker exec test-container chmod +x /usr/bin/systemctl
          
          # Create mock resolv.conf for systemd-resolved testing
          docker exec test-container bash -c "mkdir -p /run/systemd/resolve"
          docker exec test-container bash -c "echo 'nameserver 127.0.0.53' > /run/systemd/resolve/resolv.conf"
          docker exec test-container bash -c "echo 'nameserver 8.8.8.8' >> /run/systemd/resolve/resolv.conf"
          
          # Copy test files
          docker cp . test-container:/tests
          
          # Examine the test script
          echo "===== Test Script Content ====="
          docker exec test-container cat /tests/tests/e2e_test.sh
          echo "=============================="

      - name: Run tests
        run: |
          # Run the tests with our mock environment
          docker exec test-container bash -c "cd /tests && bats tests/e2e_test.sh"

      - name: Cleanup
        if: always()
        run: docker rm -f test-container || true