name: Test Pipeline

on: [ push, pull_request ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run Unit Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Start Docker
        run: |
          docker version
          docker run -d --name test-nginx nginx:alpine

      - name: Run Integration Tests
        run: go run gotest.tools/gotestsum@latest --format=testdox -- -tags=integration -v

  debian-install-test:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker container
        run: |
          # Create a container with systemd and Docker
          docker run -d --name test-container --privileged \
            -v $PWD:/workspace -w /workspace \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ubuntu:22.04 sleep infinity
          
          # Install required packages in the container
          docker exec test-container bash -c "
            apt-get update && \
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              systemd \
              bats \
              dnsutils \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release && \
          
            # Install Docker CLI
            curl -fsSL https://get.docker.com | sh && \
          
            # Verify Docker CLI works
            docker --version
          "

      - name: Run Tests
        run: |
          docker exec test-container bash -c "
            # systemd-resolved is already part of systemd
            systemctl --version && \
            ls -la /etc/systemd/resolved.conf && \
          
            # Run your tests
            bats tests/e2e_test.sh
          "

      - name: Cleanup
        if: always()
        run: docker rm -f test-container