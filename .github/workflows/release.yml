name: Release
env:
  # --- USE A SYSTEMD-READY IMAGE ---
  # Switched to an image known to work well with systemd in containers
  TEST_OS_IMAGE: "jrei/systemd-ubuntu:22.04"
  CONTAINER_NAME: "systemd-test-env"
  DEBIAN_PACKAGE_NAME: docker-dns

on:
  workflow_run:
    workflows: [ "Tests" ]
    types:
      - completed
  push:
    tags:
      - 'v*'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
      - name: Run GoReleaser
        id: run_go_releaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_SECRET }}
      - name: Get release upload URL
        id: get_release_url
        run: |
          release_data=$(gh api repos/${GITHUB_REPOSITORY}/releases/tags/${GITHUB_REF_NAME})
          echo "UPLOAD_URL=$(echo $release_data | jq -r '.upload_url' | sed 's/{.*}//')" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ACTION_SECRET }}

  debian-install-test:
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        os_image:
          - "jrei/systemd-ubuntu:24.04"
          - "jrei/systemd-ubuntu:22.04"
          #- "jrei/systemd-ubuntu:20.04"
          #- "jrei/systemd-ubuntu:18.04"
          #- "jrei/systemd-ubuntu:16.04"
          #- "jrei/systemd-debian:13"
          #- "jrei/systemd-debian:12"
          #- "jrei/systemd-debian:11"
          #- "jrei/systemd-debian:10"
          #- "jrei/systemd-debian:8"
          #- "jrei/systemd-debian:9"

    container:
      image: quay.io/podman/stable
      options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Workspace Path (using ENV var inside job container)
        run: |
          echo "Host workspace path variable (from GHA context): ${{ github.workspace }}"
          echo "Job container GITHUB_WORKSPACE env var: $GITHUB_WORKSPACE"
          echo "---"
          echo "Checking workspace directory existence using ENV var: $GITHUB_WORKSPACE"
          if [ -d "$GITHUB_WORKSPACE" ]; then
            echo "Job container workspace directory '$GITHUB_WORKSPACE' exists. Listing contents:"
            ls -la "$GITHUB_WORKSPACE"
          else
            echo "ERROR: Workspace directory '$GITHUB_WORKSPACE' not found inside job container!"
            exit 1
          fi
          echo "---"

      - name: Start systemd container in background
        run: |
          # Define image name (assuming docker.io, adjust if needed)
          FQ_IMAGE_NAME="docker.io/${{ matrix.os_image }}"
          podman run -d --name ${{ env.CONTAINER_NAME }} --privileged --cgroupns=host -v "$GITHUB_WORKSPACE":/workdir ${FQ_IMAGE_NAME} /sbin/init

          echo "Waiting for systemd to initialize..."
          sleep 20
          # Check if systemd is minimally operational
          if podman exec ${{ env.CONTAINER_NAME }} systemctl list-units > /dev/null; then
             echo "Systemd seems operational. Checking system running state..."
             # Wait for the system to reach the 'running' state
             if podman exec ${{ env.CONTAINER_NAME }} systemctl is-system-running --wait; then
               echo "Systemd reports system is running."
             else
               # Use systemctl status to get more info if degraded
               status=$(podman exec ${{ env.CONTAINER_NAME }} systemctl is-system-running)
               echo "Warning: Systemd might be degraded but continuing... State: $status"
               podman exec ${{ env.CONTAINER_NAME }} systemctl status --no-pager --full || true 
             fi
          else
             echo "Error: Failed to execute systemctl inside the container."
             echo "Checking container status:"
             podman ps -a --filter name=${{ env.CONTAINER_NAME }}
             echo "Dumping container logs:"
             podman logs ${{ env.CONTAINER_NAME }}
             exit 1
          fi

      - name: Install dependencies (Docker, Docker Compose) inside the container
        run: |
          echo "Updating apt cache and installing dependencies..."
          # Use podman exec to run commands inside the systemd container.
          podman exec ${{ env.CONTAINER_NAME }} bash -c ' \
            export DEBIAN_FRONTEND=noninteractive && \
            apt-get update && \
            apt-get install -y --no-install-recommends \
              docker.io \
              curl \
              wget \
              bash \
              jq \
              net-tools \
              dnsutils \
              git \
              libcap2-bin \
              ca-certificates \
              sudo && \
            apt-get clean && rm -rf /var/lib/apt/lists/*'
          echo "Dependencies installed."

      - name: Enable and Start Docker service via systemd
        run: |
          echo "Enabling and starting Docker service using systemctl..."
          podman exec ${{ env.CONTAINER_NAME }} systemctl enable docker
          podman exec ${{ env.CONTAINER_NAME }} systemctl start docker

          echo "Waiting for Docker service to become active..."
          # Loop until 'docker.service' is active or timeout (e.g., 30 seconds)
          timeout=30
          interval=2
          elapsed=0
          while ! podman exec ${{ env.CONTAINER_NAME }} systemctl is-active --quiet docker; do
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout waiting for Docker service to start."
              podman exec ${{ env.CONTAINER_NAME }} systemctl status docker --no-pager -n 50
              podman exec ${{ env.CONTAINER_NAME }} journalctl -u docker --no-pager -n 50
              exit 1
            fi
            echo "Waiting for Docker... (${elapsed}s / ${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Docker service is active."
          podman exec ${{ env.CONTAINER_NAME }} docker info # Verify docker is running
      - name: Run Install Debian Package
        run: |
          echo "Running tests inside the container..."
          # Add your actual test commands here, e.g.:
          podman exec ${{ env.CONTAINER_NAME }} resolvectl status
          podman exec ${{ env.CONTAINER_NAME }} service systemd-resolved status
          podman exec ${{ env.CONTAINER_NAME }} ls /workdir
          podman exec ${{ env.CONTAINER_NAME }} docker ps
          podman exec ${{ env.CONTAINER_NAME }} "bash" "-c" export NUMERIC_VERSION=$(echo "${{ github.ref_name }}" | sed "s/v//g")
          podman exec ${{ env.CONTAINER_NAME }} "bash" "-c" echo "NUMERIC_VERSION=${NUMERIC_VERSION}" >> $GITHUB_ENV
          podman exec ${{ env.CONTAINER_NAME }} "bash" "-c" "cd /workdir/build/dpkg && ./build.sh ${{ github.repository_owner }} ${{ github.event.repository.name }} ${{ github.ref_name }}"
          podman exec ${{ env.CONTAINER_NAME }} "bash" "-c" "dpkg -i /workdir/build/dpkg/*.deb"
          podman exec ${{ env.CONTAINER_NAME }} systemctl status ${{ env.DEBIAN_PACKAGE_NAME }}.service --no-pager -n 50
          podman exec ${{ env.CONTAINER_NAME }} docker run -d --name nginx nginx:alpine
          podman exec ${{ env.CONTAINER_NAME }} sleep 1
      - name: Test Direct Internal Resolution
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }} dig @127.0.0.153 nginx.docker +short | head -1 || (echo "Internal DNS resolution against 127.0.0.153 failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "Internal DNS resolution against 127.0.0.153 returned an unexpected value" && exit 1)
          echo "nginx.docker : $address"
      - name: Test Integrated Internal Resolution (systemd-resolved)
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }} dig nginx.docker +short | head -1 || (echo "Internal DNS resolution through systemd-resolved failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "Internal DNS resolution through systemd-resolved returned an unexpected value" && exit 1)
          echo "nginx.docker : $address"
      - name: Test Direct External Resolution
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }} dig @127.0.0.153 google.com +short | head -1 || (echo "External DNS resolution against 127.0.0.153 failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "External DNS resolution against 127.0.0.153 returned an unexpected value" && exit 1)
          echo "google.com : $address"
      - name: Test Integrated External Resolution (systemd-resolved)
        run: |
          address="$(podman exec ${{ env.CONTAINER_NAME }}  dig google.com +short | head -1 || (echo "External DNS resolution through systemd-resolved failed" && exit 1))"
          [[ $address =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] || (echo "External DNS resolution through systemd-resolved returned an unexpected value" && exit 1)
          echo "google.com : $address"
      - name: Remove Debian Package
        run: |
          podman exec ${{ env.CONTAINER_NAME }} dpkg -l | grep ${{ env.DEBIAN_PACKAGE_NAME }} 
          podman exec ${{ env.CONTAINER_NAME }} systemctl is-active  ${{ env.DEBIAN_PACKAGE_NAME }}.service
          podman exec ${{ env.CONTAINER_NAME }} systemctl list-unit-files | grep ${{ env.DEBIAN_PACKAGE_NAME }}.service
          podman exec ${{ env.CONTAINER_NAME }} dpkg -r ${{ env.DEBIAN_PACKAGE_NAME }}

          # Verify package removal
          if [[ podman exec ${{ env.CONTAINER_NAME }} "dpkg -l ${{ env.DEBIAN_PACKAGE_NAME }}" ]]; then
            echo "Found the package ${{ env.DEBIAN_PACKAGE_NAME }} even after the removal process, this should not be the case!"
            exit 1
          else
            echo "Package ${{ env.DEBIAN_PACKAGE_NAME }}" removed successfully, could not find any trace of it in the system"
          fi

      - name: Verify Service Removal
        run: |
          # Check if service file was removed
          if podman exec ${{ env.CONTAINER_NAME }} systemctl list-unit-files | grep ${{ env.DEBIAN_PACKAGE_NAME }}.service; then
            echo "Service file still exists!"
            exit 1
          fi

          # Check if service is inactive
          if podman exec ${{ env.CONTAINER_NAME }} systemctl is-active --quiet ${{ env.DEBIAN_PACKAGE_NAME }}.service; then
            echo "Service is still active!"
            exit 1
          fi

      - name: Test DNS Resolution Rollback
        run: |
          # Verify direct DNS server is gone
          if podman exec ${{ env.CONTAINER_NAME }} dig @127.0.0.153 google.com +short | grep -qE '([0-9]{1,3}\.){3}[0-9]{1,3}'; then
            echo "Package DNS server still responding!"
            exit 1
          fi

          # Verify systemd-resolved fallback
          if ! podman exec ${{ env.CONTAINER_NAME }} dig google.com +short | grep -qE '([0-9]{1,3}\.){3}[0-9]{1,3}'; then
            echo "System DNS resolution broken after removal!"
            exit 1
          fi

          # Verify Docker embedded DNS working
          podman exec ${{ env.CONTAINER_NAME }} docker run -d --name nginx nginx:alpine
          sleep 2
          if ! podman exec ${{ env.CONTAINER_NAME }} dig @127.0.0.11 nginx.docker +short | grep -qE '([0-9]{1,3}\.){3}[0-9]{1,3}'; then
            echo "Docker embedded DNS not working!"
            exit 1
          fi

  release-debian-package:
    runs-on: ubuntu-latest
    needs: debian-install-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build Debian Package
        run: |
          cd ./build/dpkg
          export NUMERIC_VERSION=$(echo "${{ github.ref_name }}" | sed "s/v//g")
          echo "NUMERIC_VERSION=${NUMERIC_VERSION}" >> $GITHUB_ENV
          ./build.sh  ${{ github.repository_owner }} ${{ github.event.repository.name }} "${{ github.ref_name }}"
      - name: Upload Debian package to GitHub Release
        run: |
          CUR_DIR="./build/dpkg/"
          DEB_FILE=$(ls ./build/dpkg/*.deb | tail -1)
          CHECKSUM_SUFFIX="_checksum.txt"
          sha256sum "$DEB_FILE" | sed "s#$CUR_DIR##g"
          sha256sum "$DEB_FILE" | sed "s#$CUR_DIR##g" > "$DEB_FILE$CHECKSUM_SUFFIX"
          echo "DEB_FILE=$DEB_FILE"
          echo "DEB_CHECKSUM_FILE=$DEB_FILE$CHECKSUM_SUFFIX"
          cat "$DEB_FILE$CHECKSUM_SUFFIX"
          gh release upload "${GITHUB_REF_NAME}" ./build/dpkg/*.deb --repo "${GITHUB_REPOSITORY}"
          gh release upload "${GITHUB_REF_NAME}" "$DEB_FILE$CHECKSUM_SUFFIX" --repo "${GITHUB_REPOSITORY}"
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_SECRET }}
